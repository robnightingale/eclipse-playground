#!/usr/bin/env node

/**
 * Module dependencies.
 */

// mongo
const mongoose = require('mongoose');
// let config = require('./config'); //we load the db location from the JSON files
//db options
const dbConn = {
    "DBHost": "mongodb://localhost/dev"
};

const options = {
    server: {socketOptions: {keepAlive: 1, connectTimeoutMS: 30000, useMongoClient: true}},
    replset: {socketOptions: {keepAlive: 1, connectTimeoutMS: 30000, useMongoClient: true}}
};

//db connection
mongoose.connect(dbConn.DBHost, options);
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));


var app = require('../app');
var debug = require('debug')('eclipse-playground:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket.io
 */
var socketApi = require('../socketApi');
var io = socketApi.io;
io.attach(server);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);

    // if (process.env.NODE_ENV === 'development') { // Only in dev environment

        // https://github.com/analog-nico/express-print-routes
        // Absolute path to output file
        var path = require('path')
        var filepath = path.join(__dirname, '../docs/routes.generated.txt')

        // Invoke express-print-routes
        require('express-print-routes')(app, filepath)

    // }
}
